// Generated by CoffeeScript 1.8.0
var NAV, SUBJECTS, TIMES, msnry, ref;

msnry = null;

ref = new Firebase("https://question-everything.firebaseio.com");

NAV = {
  'home': 'home',
  'faq': 'faq',
  'exp': 'what is this',
  'graph': 'view graph'
};

SUBJECTS = {
  'fun': 'Fun',
  'serious': 'Serious',
  'stories': 'Stories',
  'test': 'testing'
};

TIMES = {
  'hour': 'past hour',
  'day': 'past 24 hours',
  'year': 'past year',
  'all': 'all time'
};

ref.authAnonymously(function(err, data) {
  var renderHeader, renderNewQuestionPopup, renderQuestion;
  renderHeader = function() {
    var $header, nav_selected, subject_selected, times_selected, updateUrl;
    $header = $('body > .container > .header');
    nav_selected = $.url('?n') || 'home';
    subject_selected = $.url('?s') || 'fun';
    times_selected = $.url('?t') || 'all';
    updateUrl = function(json) {
      var k, key, params, v, val, variables;
      variables = $.url('?') || {};
      for (key in json) {
        val = json[key];
        variables[key] = val;
      }
      params = ((function() {
        var _results;
        _results = [];
        for (k in variables) {
          v = variables[k];
          _results.push("" + k + "=" + (encodeURIComponent(v)));
        }
        return _results;
      })()).join('&');
      return history.pushState(null, null, "?" + params);
    };
    $header.html(teacup.render(function() {
      div('.nav', function() {
        var key, val, _results;
        _results = [];
        for (key in NAV) {
          val = NAV[key];
          _results.push(div('.nav-item', {
            'data': {
              'nav': key,
              'selected': "" + (key === nav_selected)
            }
          }, function() {
            return val;
          }));
        }
        return _results;
      });
      div('.subjects', function() {
        var key, val, _results;
        _results = [];
        for (key in SUBJECTS) {
          val = SUBJECTS[key];
          _results.push(div('.subject', {
            'data': {
              subject: key,
              selected: "" + (key === subject_selected)
            }
          }, function() {
            return val;
          }));
        }
        return _results;
      });
      return select('.time-slot', function() {
        var key, val, _results;
        _results = [];
        for (key in TIMES) {
          val = TIMES[key];
          _results.push(option({
            value: key
          }, function() {
            return val;
          }));
        }
        return _results;
      });
    }));
    $header.find('.nav-item').on('click', function(e) {
      var $el;
      $el = $(e.currentTarget);
      $el.siblings().attr('data-selected', false);
      $el.attr('data-selected', true);
      return updateUrl({
        'n': $el.data('nav')
      });
    });
    return $header.find('.subjects .subject').on('click', function(e) {
      var $el;
      $el = $(e.currentTarget);
      $el.siblings().attr('data-selected', false);
      $el.attr('data-selected', true);
      renderQuestion($el.data('subject'));
      return updateUrl({
        's': $el.data('subject')
      });
    });
  };
  renderNewQuestionPopup = function() {};
  renderQuestion = function(link, previous) {
    var $questions, getNextQ;
    if (link == null) {
      link = "fun";
    }
    if (previous == null) {
      previous = false;
    }
    getNextQ = function(finish) {
      if (link) {
        return ref.child(link).orderByChild("vote_inverse").once('value', function(doc) {
          console.log(doc.val());
          return finish(doc);
        });
      } else {
        return finish(null);
      }
    };
    $('body .questions-container').html(teacup.render(function() {
      return div('.questions');
    }));
    $questions = $('body .questions');
    $(window).off('resize', function() {});
    $(window).on('resize', function() {
      var width;
      width = Math.floor($(window).width() / 340);
      return $('.questions-container').css('max-width', "" + (width * 340) + "px");
    });
    return getNextQ(function(doc) {
      var $new_question;
      if (doc !== null) {
        doc.forEach(function(child_doc) {
          var $question, item, question, title, vote, _ref;
          _ref = (child_doc != null ? child_doc.val() : void 0) || {}, question = _ref.question, vote = _ref.vote, title = _ref.title;
          if (!(question && title)) {
            return false;
          }
          item = localStorage.getItem(child_doc.key()) || {};
          $question = $(teacup.render(function() {
            return div('.question', {
              'data-key': child_doc.key()
            }, function() {
              div('.voting', function() {
                div({
                  'data-arrow': 'up'
                });
                div(".vote", function() {});
                return div({
                  'data-arrow': 'down'
                });
              });
              div('.question-title', function() {
                return title;
              });
              div('.question-body', function() {
                return question;
              });
              return div('.answers', function() {
                var ans, opt, _i, _results;
                _results = [];
                for (opt = _i = 1; _i <= 4; opt = ++_i) {
                  ans = child_doc.child("answer_" + opt).val();
                  if (!ans) {
                    continue;
                  }
                  _results.push(div(function() {
                    return span(".answer_" + opt + ".text", {
                      'data-next': ans.next
                    }, function() {
                      return ans.text;
                    });
                  }));
                }
                return _results;
              });
            });
          }));
          $questions.append($question);
          return (function($question) {
            $question.find('[data-arrow]').on('click', function(e) {
              var $el, incriment, modified_incriment;
              $el = $(e.currentTarget);
              debugger;
              incriment = $el.data('arrow') === 'up' ? 1 : -1;
              item = JSON.parse(localStorage.getItem(child_doc.key()) || '{}');
              modified_incriment = incriment;
              if (item.vote === incriment) {
                modified_incriment = incriment * -1;
                incriment = 0;
              } else if (item.vote === incriment * -1) {
                modified_incriment = incriment * 2;
              }
              item.vote = incriment;
              item.vote_inverse = incriment * -1;
              localStorage.setItem(child_doc.key(), JSON.stringify(item));
              return ref.child("" + link + "/" + (child_doc.key()) + "/vote").once('value', function(current_vote_doc) {
                var currentVote, new_val;
                currentVote = (current_vote_doc != null ? current_vote_doc.val() : void 0) || 0;
                new_val = currentVote + modified_incriment;
                ref.child("" + link + "/" + (child_doc.key()) + "/vote").set(new_val);
                return ref.child("" + link + "/" + (child_doc.key()) + "/vote_inverse").set(new_val * -1);
              });
            });
            ref.child("" + link + "/" + (child_doc.key()) + "/vote").on('value', function(vote_doc) {
              var $vote, local_vote, new_vote;
              new_vote = (vote_doc != null ? vote_doc.val() : void 0) || 0;
              $vote = $question.find('.vote');
              $vote.html("" + new_vote);
              $vote.toggleClass('bad', new_vote < 0);
              $vote.toggleClass('good', new_vote > 5);
              item = JSON.parse(localStorage.getItem(child_doc.key()) || '{}');
              local_vote = 'none';
              if (item.vote > 0) {
                local_vote = 'up';
              } else if (item.vote < 0) {
                local_vote = 'down';
              }
              return $question.attr('data-vote', local_vote);
            });
            $question.find('.answers .text').on('click', function(e) {
              var $el, key, key_previous, next;
              $el = $(e.currentTarget);
              next = $el.data('next');
              key = $el.closest('.question').data('key');
              key_previous = "" + link + "/" + key + "/" + ($el.attr('class'));
              ref.child("" + key_previous + "/count").transaction(function(currentCount) {
                if (currentCount == null) {
                  currentCount = 0;
                }
                return currentCount + 1;
              });
              return renderQuestion(next, key_previous);
            });
            return false;
          })($question);
        });
      }
      $new_question = $(teacup.render(function() {
        return div('.question', function() {
          div('.open-pop', function() {
            return 'Post Something Original';
          });
          return div('.modalDialog', function() {
            return div('.new-question', function() {
              h3(function() {
                return 'Submitting a new Post';
              });
              span({
                "class": 'close'
              }, function() {
                return 'X';
              });
              return form(function() {
                div('.text-area-container', function() {
                  textarea('.question-title', {
                    'data-maxlength': 120,
                    placeholder: "Add title",
                    required: true
                  });
                  div('.resizer question-body', function() {
                    return 'A';
                  });
                  return div('.characters', function() {
                    return '';
                  });
                });
                div('.text-area-container', function() {
                  textarea('.question-body', {
                    'data-maxlength': 250,
                    placeholder: "Add your body",
                    required: true
                  });
                  div('.resizer question-body', function() {
                    return 'A';
                  });
                  return div('.characters', function() {
                    return '';
                  });
                });
                div('.answers', function() {
                  var opt, _i, _results;
                  _results = [];
                  for (opt = _i = 1; _i <= 4; opt = ++_i) {
                    _results.push(div('.text-area-container', function() {
                      var placeholder, required;
                      required = opt === 1;
                      placeholder = required ? 'Put choice here' : 'Put (optional) choice here';
                      textarea(".answer_" + opt, {
                        'data-maxlength': 140,
                        placeholder: placeholder,
                        required: required
                      });
                      div('.resizer', function() {
                        return 'A';
                      });
                      return div('.characters', function() {
                        return '';
                      });
                    }));
                  }
                  return _results;
                });
                return input({
                  type: 'submit',
                  value: 'submit'
                });
              });
            });
          });
        });
      }));
      (function($new_question) {
        $questions.prepend($new_question);
        console.log($new_question.find('.open-pop, .close'));
        $new_question.find('.open-pop, .close').on('click', function() {
          return $new_question.find('.modalDialog').toggleClass('visible');
        });
        $new_question.find('textarea').on('input', function(e) {
          var $el, maxlength, str;
          $el = $(e.currentTarget);
          maxlength = $el.attr('data-maxlength');
          str = $el.val().slice(0, maxlength);
          $el.val(str);
          if (str.length === 0) {
            $el.next().html("");
            $el.siblings('.characters').html('');
          } else {
            $el.next().html("" + str + "\n\n");
            $el.siblings('.characters').html(maxlength - str.length);
          }
          return false;
        });
        return $new_question.find('form').on('submit', function(e) {
          var $el, answer, c, new_q, new_q_obj, opt, _i;
          if (!link) {
            link = "leaf/" + (ref.child('leaf').push().key());
          }
          $el = $(e.currentTarget);
          new_q = ref.child(link).push();
          new_q_obj = {
            answer_1: {
              text: $el.find('textarea.answer_1').val()
            },
            question: $el.find('textarea.question-body').val(),
            title: $el.find('textarea.question-title').val(),
            created: Firebase.ServerValue.TIMESTAMP,
            vote: 0,
            vote_inverse: 0
          };
          c = 2;
          for (opt = _i = 2; _i <= 4; opt = ++_i) {
            answer = $el.find("textarea.answer_" + opt).val();
            if (!answer) {
              continue;
            }
            new_q_obj["answer_" + c] = {
              text: answer
            };
            c++;
          }
          debugger;
          new_q.set(new_q_obj, function() {
            var question_location;
            if (!previous) {
              return renderQuestion(link, previous);
            }
            question_location = "" + link + "/" + (new_q.key());
            return ref.child("" + previous + "/next").set(link, function() {
              return renderQuestion(link, previous);
            });
          });
          return false;
        });
      })($new_question);
      $('.questions').masonry({
        itemSelector: '.question',
        layoutPriorities: {
          upperPosition: 1,
          shelfOrder: 1
        }
      });
      msnry = $('.questions').data('masonry');
      return $(window).trigger('resize');
    });
  };
  renderHeader();
  return renderQuestion($.url('?s') || 'fun');
});
