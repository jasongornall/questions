// Generated by CoffeeScript 1.8.0
var ref;

ref = new Firebase("https://question-everything.firebaseio.com");

ref.authAnonymously(function(err, data) {
  var renderQuestion;
  renderQuestion = function(link, previous) {
    var getNextQ;
    if (link == null) {
      link = "head";
    }
    if (previous == null) {
      previous = false;
    }
    getNextQ = function(finish) {
      if (link) {
        return ref.child(link).once('value', function(doc) {
          return finish(doc);
        });
      } else {
        return finish(null);
      }
    };
    return getNextQ(function(doc) {
      var $question, $questions;
      $questions = $('body > .questions');
      $questions.empty();
      if (doc !== null) {
        doc.forEach(function(child_doc) {
          var $question, answer_1, answer_2, question, _ref;
          _ref = (child_doc != null ? child_doc.val() : void 0) || {}, question = _ref.question, answer_1 = _ref.answer_1, answer_2 = _ref.answer_2;
          if (!(question && answer_1 && answer_2)) {
            return false;
          }
          $question = $questions.append(teacup.render(function() {
            return div('.question', {
              'data-key': child_doc.key()
            }, function() {
              div('.question-header', function() {
                return question;
              });
              return div('.answers', function() {
                div('.answer_1', {
                  'data-next': answer_1.next
                }, function() {
                  return answer_1.text;
                });
                return div('.answer_2', {
                  'data-next': answer_2.next
                }, function() {
                  return answer_2.text;
                });
              });
            });
          }));
          $question.find('.answers > div').on('click', function(e) {
            var $el, key, next;
            $el = $(e.currentTarget);
            next = $el.data('next');
            key = $el.closest('.question').data('key');
            return renderQuestion(next, "" + link + "/" + key + "/" + ($el.attr('class')));
          });
          return false;
        });
      }
      $question = $questions.append(teacup.render(function() {
        return div('.question', function() {
          return form(function() {
            input('.question-header', {
              placeholder: "Add your own question to keep it going!",
              required: true
            });
            div('.answers', function() {
              input('.answer_1', {
                placeholder: 'Put answer one here',
                required: true
              });
              return input('.answer_2', {
                placeholder: 'Put answer two here',
                required: true
              });
            });
            return input({
              type: 'submit',
              value: 'submit'
            });
          });
        });
      }));
      return $question.find('form').on('submit', function(e) {
        var $el, new_q;
        if (!link) {
          link = "leaf/" + (ref.child('leaf').push().key());
        }
        $el = $(e.currentTarget);
        new_q = ref.child(link).push();
        new_q.set({
          answer_1: {
            text: $el.find('input.answer_1').val()
          },
          answer_2: {
            text: $el.find('input.answer_2').val()
          },
          question: $el.find('input.question-header').val()
        }, function() {
          var question_location;
          question_location = "" + link + "/" + (new_q.key());
          return ref.child("" + previous + "/next").set(link, function() {
            return renderQuestion(link, previous);
          });
        });
        return false;
      });
    });
  };
  return renderQuestion();
});
